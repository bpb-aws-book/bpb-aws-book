{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Lambda function that connects to PostgreSQL RDS using Secrets Manager",
  
  "Parameters": {
  },
  
  "Resources": {
    "LambdaSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for Lambda function",
        "VpcId": { "Fn::ImportValue": "BPBBookVPCForLearning" },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 5432,
            "ToPort": 5432,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    
    "PG8000LambdaLayer": {
      "Type": "AWS::Serverless::LayerVersion",
      "Properties": {
        "LayerName": "pg8000-layer",
        "Description": "Layer containing pg8000 for PostgreSQL connections",
        "ContentUri": "./src/",
        "CompatibleRuntimes": ["python3.12"]
      },
      "DeletionPolicy": "Delete"    
    },
    
    "PostgreSQLLambdaFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "./src/",
        "Handler": "app.lambda_handler",
        "Runtime": "python3.12",
        "Timeout": 60,
        "MemorySize": 128,
        "Layers": [
          {"Ref": "PG8000LambdaLayer"}
        ],
        "Environment": {
          "Variables": {
            "SECRET_ARN": { "Fn::ImportValue": "BPBBookRDSSecretARN" },
            "DB_NAME": "bpbbookdb",
            "DB_HOST": { "Fn::ImportValue": "BPBBookRDSDBAddress" },
            "DB_PORT": "5432"
          }
        },
        "Policies": [
          { "VPCAccessPolicy": {} },
          { 
            "AWSSecretsManagerGetSecretValuePolicy": {
              "SecretArn": { "Fn::ImportValue": "BPBBookRDSSecretARN" }
            }
          },
          {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "kms:Decrypt"
                ],
                "Resource": { "Fn::ImportValue": "BPBBookKMSKeyARN" },
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": { "Fn::Sub": "secretsmanager.${AWS::Region}.amazonaws.com" }
                  }
                }
              }
            ]
          },
          {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "lambda:GetLayerVersion"
                ],
                "Resource": { "Ref": "PG8000LambdaLayer" }
              }
            ]
          },
          {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": ["secretsmanager:GetResourcePolicy", "secretsmanager:GetSecretValue", "secretsmanager:DescribeSecret", "secretsmanager:ListSecretVersionIds"],
                "Resource": [{"Fn::ImportValue": "BPBBookRDSSecretARN"}]
              },
              {
                "Effect": "Allow",
                "Action": ["secretsmanager:ListSecrets"],
                "Resource": ["*"]
              },
              {
                "Effect": "Allow",
                "Action": ["kms:Decrypt"],
                "Resource": [{"Fn::ImportValue": "BPBBookKMSKeyARN"}]
              },
              {
                "Effect": "Allow",
                "Action": ["cloudformation:ListExports"],
                "Resource": ["*"]
              }
            ]
          }
        ],
        "VpcConfig": {
          "SecurityGroupIds": [
            { "Fn::GetAtt": ["LambdaSecurityGroup", "GroupId"] }
          ],
          "SubnetIds": [
            { "Fn::ImportValue": "BPBBookVPCFirstPrivateSubnet" },
            { "Fn::ImportValue": "BPBBookVPCSecondPrivateSubnet" }
          ]
        }

      }
    },
    
    "RDSIngressRule": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Fn::ImportValue": "BPBBookRDSSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": 5432,
        "ToPort": 5432,
        "SourceSecurityGroupId": { "Fn::GetAtt": ["LambdaSecurityGroup", "GroupId"] }
      }
    },
    
    "VPCEndpointSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for API Gateway VPC endpoint",
        "VpcId": { "Fn::ImportValue": "BPBBookVPCForLearning" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "10.0.0.0/16"
          }
        ]
      }
    },
    
    "APIGatewayVPCEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "VpcId": { "Fn::ImportValue": "BPBBookVPCForLearning" },
        "ServiceName": { "Fn::Sub": "com.amazonaws.${AWS::Region}.execute-api" },
        "VpcEndpointType": "Interface",
        "SubnetIds": [
          { "Fn::ImportValue": "BPBBookVPCFirstPrivateSubnet" },
          { "Fn::ImportValue": "BPBBookVPCSecondPrivateSubnet" }
        ],
        "SecurityGroupIds": [
          { "Ref": "VPCEndpointSecurityGroup" }
        ],
        "PrivateDnsEnabled": true
      }
    },
    
    "PrivateRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "PrivateBookAPI",
        "EndpointConfiguration": {
          "Types": ["PRIVATE"],
          "VpcEndpointIds": [{ "Ref": "APIGatewayVPCEndpoint" }]
        },
        "Policy": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "execute-api:Invoke",
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:sourceVpce": { "Ref": "APIGatewayVPCEndpoint" }
                }
              }
            }
          ]
        }
      }
    },
    
    "BooksResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "PrivateRestApi" },
        "ParentId": { "Fn::GetAtt": ["PrivateRestApi", "RootResourceId"] },
        "PathPart": "books"
      }
    },
    
    "BookIdResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "PrivateRestApi" },
        "ParentId": { "Ref": "BooksResource" },
        "PathPart": "{id}"
      }
    },
    
    "GetBookMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "PrivateRestApi" },
        "ResourceId": { "Ref": "BookIdResource" },
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostgreSQLLambdaFunction.Arn}/invocations" }
        }
      }
    },
    
    "LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "PostgreSQLLambdaFunction" },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateRestApi}/*/*" }
      }
    },
    
    "PostBookMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "PrivateRestApi" },
        "ResourceId": { "Ref": "BooksResource" },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostgreSQLLambdaFunction.Arn}/invocations" }
        }
      }
    },
    
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["GetBookMethod", "PostBookMethod"],
      "Properties": {
        "RestApiId": { "Ref": "PrivateRestApi" },
        "StageName": "prod"
      }
    }

  },
  
  "Outputs": {
    "PostgreSQLLambdaFunction": {
      "Description": "PostgreSQL Lambda Function ARN",
      "Value": { "Fn::GetAtt": ["PostgreSQLLambdaFunction", "Arn"] }
    },
    "PrivateAPIEndpoint": {
      "Description": "Private API Gateway endpoint URL",
      "Value": { "Fn::Sub": "https://${PrivateRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod" }
    },
    "VPCEndpointId": {
      "Description": "VPC Endpoint ID for API Gateway",
      "Value": { "Ref": "APIGatewayVPCEndpoint" }
    }
  }
}
