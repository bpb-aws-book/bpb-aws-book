{
	"Description": "This CloudFormation Template creates an EC2 instance server in a private subnet of the VPC created by CloudFormation template 10_01. Use for building docker image and for testing database connectivity",
	"AWSTemplateFormatVersion": "2010-09-09",
	"Parameters": {
		"ClusterName": {
			"Type": "String",
			"Description": "Name of the EKS cluster",
			"Default": "bpb-eks-cluster"
		},
		"KubernetesVersion": {
			"Type": "String",
			"Default": "1.31", 	
			"Description": "Kubernetes version for the EKS Cluster. Change version to use one of the last two latest versions per AWS documentation."
		},
		"LatestAmiId": {
			"Description": "The latest AMI id. Default is Amazon Linux 2023",
			"Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
			"Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"
		},
		"InstanceType": {
			"Description": "DockerBuildServer EC2 instance type",
			"Type": "String",
			"Default": "t2.small",
			"AllowedValues": [
				"t1.micro",
				"t2.nano",
				"t2.micro",
				"t2.small",
				"t2.medium",
				"t2.large",
				"m1.small",
				"m1.medium",
				"m1.large",
				"m1.xlarge",
				"m2.xlarge",
				"m2.2xlarge",
				"m2.4xlarge",
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge",
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge",
				"m4.10xlarge",
				"c1.medium",
				"c1.xlarge",
				"c3.large",
				"c3.xlarge",
				"c3.2xlarge",
				"c3.4xlarge",
				"c3.8xlarge",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"g2.2xlarge",
				"g2.8xlarge",
				"r3.large",
				"r3.xlarge",
				"r3.2xlarge",
				"r3.4xlarge",
				"r3.8xlarge",
				"i2.xlarge",
				"i2.2xlarge",
				"i2.4xlarge",
				"i2.8xlarge",
				"d2.xlarge",
				"d2.2xlarge",
				"d2.4xlarge",
				"d2.8xlarge",
				"hi1.4xlarge",
				"hs1.8xlarge",
				"cr1.8xlarge",
				"cc2.8xlarge",
				"cg1.4xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		}
	},
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Your IP and EC2 Configuration"
					},
					"Parameters": [
						"KubernetesVersion",
						"ClusterName",
						"LatestAmiId",
						"InstanceType"
					]
				}
			],
			"ParameterLabels": {
				"KubernetesVersion": {
					"default": "Kubernetes Version"
				},
				"LatestAmiId": {
					"default": "Amazon Linux 2 AMI ID"
				},
				"InstanceType": {
					"default": "Instance Type"
				},
				"ClusterName": {
					"default": "EKS Cluster Name"
				}
			}
		}
	},
	"Resources": {
		"EKSClusterRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "eks.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
				]
			}
		},
		"EKSCluster": {
			"Type": "AWS::EKS::Cluster",
			"Properties": {
				"Name": {
					"Ref": "ClusterName"
				},
				"Version": {
					"Ref": "KubernetesVersion"
				},
				"RoleArn": {
					"Fn::GetAtt": [
						"EKSClusterRole",
						"Arn"
					]
				},
				"ResourcesVpcConfig": {
					"SubnetIds": [
					    {
					        "Fn::ImportValue": "BPBBookVPCFirstPublicSubnet"
					    },
					    {
					        "Fn::ImportValue": "BPBBookVPCSecondPublicSubnet"
					    }
					],
					"EndpointPublicAccess": true,
					"EndpointPrivateAccess": true
				},
				"Logging": {
					"ClusterLogging": {
						"EnabledTypes": [
							{
								"Type": "api"
							},
							{
								"Type": "audit"
							},
							{
								"Type": "authenticator"
							}
						]
					}
				}
			}
		},
		"NodeInstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "ec2.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
					"arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
					"arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
					"arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
				],
				"Policies": [{
					"PolicyName": "AdditionalPermissionsPolicy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [
							{
								"Effect": "Allow",
								"Action": ["secretsmanager:GetResourcePolicy",
											"secretsmanager:GetSecretValue",
											"secretsmanager:DescribeSecret",
											"secretsmanager:ListSecretVersionIds"],
								"Resource": [{"Fn::ImportValue": "BPBBookRDSSecretARN"}]
							},
							{
								"Effect": "Allow",
								"Action": ["secretsmanager:ListSecrets"],
								"Resource": ["*"]
							},
							{
								"Effect": "Allow",
								"Action": [
									"kms:Decrypt"
								],
								"Resource": [{"Fn::ImportValue": "BPBBookKMSKeyARN"}]
							},
							{
								"Effect": "Allow",
								"Action": ["cloudformation:ListExports"],
								"Resource": ["*"]
							},
							{
								"Effect": "Allow",
								"Action": [
									"ecr:BatchGetImage",
									"ecr:BatchCheckLayerAvailability",
									"ecr:CompleteLayerUpload",
									"ecr:GetDownloadUrlForLayer",
									"ecr:InitiateLayerUpload",
									"ecr:PutImage",
									"ecr:UploadLayerPart",
									"ecr:ListImages"
								],
								"Resource": {
									"Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/bpbbook/inquisitivebookwormclubrepo"
								}
							},
							{
								"Effect": "Allow",
								"Action": [
									"ecr:GetAuthorizationToken"
								],
								"Resource": ["*"]
							}
						]
					}
				}]

			}
		},
		"NodeGroup": {
			"Type": "AWS::EKS::Nodegroup",
			"Properties": {
				"ClusterName": {
					"Ref": "EKSCluster"
				},
				"NodeRole": {
					"Fn::GetAtt": [
						"NodeInstanceRole",
						"Arn"
					]
				},
				"ScalingConfig": {
					"MinSize": 1,
					"DesiredSize": 1,
					"MaxSize": 2
				},
				"Subnets": [
					{
						"Fn::ImportValue": "BPBBookVPCFirstPublicSubnet"
					},
					{
						"Fn::ImportValue": "BPBBookVPCSecondPublicSubnet"
					}
				],
				"InstanceTypes": [
					"t3.medium"
				]
			}
		},
		"SSMIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "SSMIAMRoleForEKSWorkerNodes",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
                ],
				"Policies": [{
					"PolicyName": "AdditionalPermissionsPolicy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [
							{
								"Effect": "Allow",
								"Action": ["secretsmanager:GetResourcePolicy",
											"secretsmanager:GetSecretValue",
											"secretsmanager:DescribeSecret",
											"secretsmanager:ListSecretVersionIds"],
								"Resource": [{"Fn::ImportValue": "BPBBookRDSSecretARN"}]
							},
							{
								"Effect": "Allow",
								"Action": ["secretsmanager:ListSecrets"],
								"Resource": ["*"]
							},
							{
								"Effect": "Allow",
								"Action": [
									"kms:Decrypt"
								],
								"Resource": [{"Fn::ImportValue": "BPBBookKMSKeyARN"}]
							},
							{
								"Effect": "Allow",
								"Action": ["cloudformation:ListExports"],
								"Resource": ["*"]
							},
							{
								"Effect": "Allow",
								"Action": [
									"ecr:BatchGetImage",
									"ecr:BatchCheckLayerAvailability",
									"ecr:CompleteLayerUpload",
									"ecr:GetDownloadUrlForLayer",
									"ecr:InitiateLayerUpload",
									"ecr:PutImage",
									"ecr:UploadLayerPart",
									"ecr:ListImages"
								],
								"Resource": {
									"Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/bpbbook/inquisitivebookwormclubrepo"
								}
							},
							{
								"Effect": "Allow",
								"Action": [
									"ecr:GetAuthorizationToken"
								],
								"Resource": ["*"]
							}
						]
					}
				}]

            }
        },
		"SSMIAMInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SSMIAMRole"
                    }
                ]
            }
        },
		"AWSLoadBalancerControllerRole": {
      	"Type": "AWS::IAM::Role",
		"DependsOn": "AWSLoadBalancerControllerIAMPolicy",
      	"Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": {
					"Fn::Sub": "arn:aws:iam::${AWS::AccountId}:oidc-provider/${!Select [1, !Split ['https://', ${EKSCluster.OpenIdConnectIssuerUrl}]]}"
                }
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "${EKSCluster.OpenIdConnectIssuerUrl#slice(8)}:aud": "sts.amazonaws.com",
				  "${EKSCluster.OpenIdConnectIssuerUrl#slice(8)}:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller"}}
            }]},
			"Path": "/",
			"ManagedPolicyArns": [
				{
					"Fn::Join": [
						"",
						[
							"arn:aws:iam::",
							{ "Ref": "AWS::AccountId" },
							":policy/AWSLoadBalancerControllerIAMPolicy"
						]
					]
				}
			]
			}
		},
        "AWSLoadBalancerControllerIAMPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "ManagedPolicyName": "AWSLoadBalancerControllerIAMPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "iam:CreateServiceLinkedRole"
                            ],
                            "Resource": "*",
                            "Condition": {
                                "StringEquals": {
                                    "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:DescribeAccountAttributes",
                                "ec2:DescribeAddresses",
                                "ec2:DescribeAvailabilityZones",
                                "ec2:DescribeInternetGateways",
                                "ec2:DescribeVpcs",
                                "ec2:DescribeVpcPeeringConnections",
                                "ec2:DescribeSubnets",
                                "ec2:DescribeSecurityGroups",
                                "ec2:DescribeInstances",
                                "ec2:DescribeNetworkInterfaces",
                                "ec2:DescribeTags",
                                "ec2:GetCoipPoolUsage",
                                "ec2:DescribeCoipPools",
                                "elasticloadbalancing:DescribeLoadBalancers",
                                "elasticloadbalancing:DescribeLoadBalancerAttributes",
                                "elasticloadbalancing:DescribeListeners",
                                "elasticloadbalancing:DescribeListenerCertificates",
                                "elasticloadbalancing:DescribeSSLPolicies",
                                "elasticloadbalancing:DescribeRules",
                                "elasticloadbalancing:DescribeTargetGroups",
                                "elasticloadbalancing:DescribeTargetGroupAttributes",
                                "elasticloadbalancing:DescribeTargetHealth",
                                "elasticloadbalancing:DescribeTags"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "cognito-idp:DescribeUserPoolClient",
                                "acm:ListCertificates",
                                "acm:DescribeCertificate",
                                "iam:ListServerCertificates",
                                "iam:GetServerCertificate",
                                "waf-regional:GetWebACL",
                                "waf-regional:GetWebACLForResource",
                                "waf-regional:AssociateWebACL",
                                "waf-regional:DisassociateWebACL",
                                "wafv2:GetWebACL",
                                "wafv2:GetWebACLForResource",
                                "wafv2:AssociateWebACL",
                                "wafv2:DisassociateWebACL",
                                "shield:GetSubscriptionState",
                                "shield:DescribeProtection",
                                "shield:CreateProtection",
                                "shield:DeleteProtection"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:AuthorizeSecurityGroupIngress",
                                "ec2:RevokeSecurityGroupIngress"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:CreateSecurityGroup"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:CreateTags",
                                "ec2:DeleteTags"
                            ],
                            "Resource": "arn:aws:ec2:*:*:security-group/*",
                            "Condition": {
                                "StringEquals": {
                                    "ec2:CreateAction": "CreateSecurityGroup"
                                },
                                "Null": {
                                    "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:CreateTags",
                                "ec2:DeleteTags"
                            ],
                            "Resource": "arn:aws:ec2:*:*:security-group/*",
                            "Condition": {
                                "Null": {
                                    "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:AuthorizeSecurityGroupIngress",
                                "ec2:RevokeSecurityGroupIngress",
                                "ec2:DeleteSecurityGroup"
                            ],
                            "Resource": "*",
                            "Condition": {
                                "Null": {
                                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "elasticloadbalancing:CreateLoadBalancer",
                                "elasticloadbalancing:CreateTargetGroup"
                            ],
                            "Resource": "*",
                            "Condition": {
                                "Null": {
                                    "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "elasticloadbalancing:CreateListener",
                                "elasticloadbalancing:DeleteListener",
                                "elasticloadbalancing:CreateRule",
                                "elasticloadbalancing:DeleteRule"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "elasticloadbalancing:AddTags",
                                "elasticloadbalancing:RemoveTags"
                            ],
                            "Resource": [
                                "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                                "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                                "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                            ],
                            "Condition": {
                                "Null": {
                                    "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "elasticloadbalancing:AddTags",
                                "elasticloadbalancing:RemoveTags"
                            ],
                            "Resource": [
                                "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                                "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                                "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                                "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "elasticloadbalancing:ModifyLoadBalancerAttributes",
                                "elasticloadbalancing:SetIpAddressType",
                                "elasticloadbalancing:SetSecurityGroups",
                                "elasticloadbalancing:SetSubnets",
                                "elasticloadbalancing:DeleteLoadBalancer",
                                "elasticloadbalancing:ModifyTargetGroup",
                                "elasticloadbalancing:ModifyTargetGroupAttributes",
                                "elasticloadbalancing:DeleteTargetGroup"
                            ],
                            "Resource": "*",
                            "Condition": {
                                "Null": {
                                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "elasticloadbalancing:RegisterTargets",
                                "elasticloadbalancing:DeregisterTargets"
                            ],
                            "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "elasticloadbalancing:SetWebAcl",
                                "elasticloadbalancing:ModifyListener",
                                "elasticloadbalancing:AddListenerCertificates",
                                "elasticloadbalancing:RemoveListenerCertificates",
                                "elasticloadbalancing:ModifyRule"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
            }
        }
	}
}
