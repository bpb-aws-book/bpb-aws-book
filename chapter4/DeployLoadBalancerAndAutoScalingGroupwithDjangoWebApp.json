{
	"Description": "This CloudFormation Template deploys the underlying infrastructure and an auto scaling group with web servers for our Django Web Application",
	"AWSTemplateFormatVersion": "2010-09-09",
	"Parameters": {
		"YourPublicIPAddress": {
			"Description": "Please supply your public IP address with a /32 suffix. Type checkip.amazonaws.com in your web browser to view your public IP address. For example, if your public IP address is 1.2.3.4, provide this value:1.2.3.4/32",
			"Type": "String"
		},
		"LatestAmiId": {
			"Description": "The AMI ID with Django Web Application Installed. Its in the format ami-xxxxxxxx",
			"Type": "String",
			"Default": "ami-0851938ac6c0ce29a"
		},
		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.small",
			"AllowedValues": [
				"t1.micro",
				"t2.nano",
				"t2.micro",
				"t2.small",
				"t2.medium",
				"t2.large",
				"m1.small",
				"m1.medium",
				"m1.large",
				"m1.xlarge",
				"m2.xlarge",
				"m2.2xlarge",
				"m2.4xlarge",
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge",
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge",
				"m4.10xlarge",
				"c1.medium",
				"c1.xlarge",
				"c3.large",
				"c3.xlarge",
				"c3.2xlarge",
				"c3.4xlarge",
				"c3.8xlarge",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"g2.2xlarge",
				"g2.8xlarge",
				"r3.large",
				"r3.xlarge",
				"r3.2xlarge",
				"r3.4xlarge",
				"r3.8xlarge",
				"i2.xlarge",
				"i2.2xlarge",
				"i2.4xlarge",
				"i2.8xlarge",
				"d2.xlarge",
				"d2.2xlarge",
				"d2.4xlarge",
				"d2.8xlarge",
				"hi1.4xlarge",
				"hs1.8xlarge",
				"cr1.8xlarge",
				"cc2.8xlarge",
				"cg1.4xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"VpcCIDR": {
			"Description": "Please enter the IP range (CIDR notation) for this VPC",
			"Type": "String",
			"Default": "10.0.0.0/16"
		},
		"FirstPublicSubnetCIDR": {
			"Description": "Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone",
			"Type": "String",
			"Default": "10.0.1.0/24"
		},
		"SecondPublicSubnetCIDR": {
			"Description": "Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone",
			"Type": "String",
			"Default": "10.0.2.0/24"
		},
		"FirstPrivateSubnetCIDR": {
			"Description": "Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone",
			"Type": "String",
			"Default": "10.0.3.0/24"
		},
		"SecondPrivateSubnetCIDR": {
			"Description": "Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone",
			"Type": "String",
			"Default": "10.0.4.0/24"
		}
	},
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Your IP and EC2 Configuration"
					},
					"Parameters": [
						"YourPublicIPAddress",
						"LatestAmiId",
						"InstanceType"
					]
				},
				{
					"Label": {
						"default": "VPC Configuration"
					},
					"Parameters": [
						"VpcCIDR",
						"FirstPublicSubnetCIDR",
						"SecondPublicSubnetCIDR",
						"FirstPrivateSubnetCIDR",
						"SecondPrivateSubnetCIDR"
					]
				}
			],
			"ParameterLabels": {
				"VpcCIDR": {
					"default": "CIDR of the VPC where the web server will be deployed"
				},
				"FirstPublicSubnetCIDR": {
					"default": "CIDR of the public subnet where the web server will be deployed"
				},
				"YourPublicIPAddress": {
					"default": "Your public IP Address"
				},
				"LatestAmiId": {
					"default": "Amazon Linux 2 AMI ID"
				},
				"InstanceType": {
					"default": "Instance Type"
				}
			}
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": {
					"Ref": "VpcCIDR"
				},
				"EnableDnsSupport": true,
				"EnableDnsHostnames": true,
				"Tags": [
					{
						"Key": "Name",
						"Value": "Custom VPC for learning"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Metadata": {
				"Comment": "The internet gateway allows resources a route out to the internet"
			},
			"Properties": {
				"Tags": [
					{
						"Key": "Name",
						"Value": "ChapterThree-IGW"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				]
			}
		},
		"InternetGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				},
				"VpcId": {
					"Ref": "VPC"
				}
			},
			"Metadata": {
				"Comment": "Attaches the internet gateway to the VPC"
			}
		},
		"FirstPublicSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						0,
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"CidrBlock": {
					"Ref": "FirstPublicSubnetCIDR"
				},
				"MapPublicIpOnLaunch": true,
				"Tags": [
					{
						"Key": "Name",
						"Value": "Chapter Three Public Subnet in the first AZ"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				]
			}
		},
		"SecondPublicSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						1,
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"CidrBlock": {
					"Ref": "SecondPublicSubnetCIDR"
				},
				"MapPublicIpOnLaunch": true,
				"Tags": [
					{
						"Key": "Name",
						"Value": "Chapter Three Public Subnet in the second AZ"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				]
			}
		},
		"FirstPrivateSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						0,
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"CidrBlock": {
					"Ref": "FirstPrivateSubnetCIDR"
				},
				"MapPublicIpOnLaunch": false,
				"Tags": [
					{
						"Key": "Name",
						"Value": "Chapter Three Private Subnet in the first AZ"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				]
			}
		},
		"SecondPrivateSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						1,
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"CidrBlock": {
					"Ref": "SecondPrivateSubnetCIDR"
				},
				"MapPublicIpOnLaunch": false,
				"Tags": [
					{
						"Key": "Name",
						"Value": "Chapter Three Private Subnet in the second AZ"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				]
			}
		},
		"FirstNATGatewayEIP": {
			"Type": "AWS::EC2::EIP",
			"DependsOn": "InternetGatewayAttachment",
			"Properties": {
				"Domain": "vpc"
			},
			"Metadata": {
				"Comment": "Allocates an Elastic IP address for the gateway"
			}
		},
		"SecondNATGatewayEIP": {
			"Type": "AWS::EC2::EIP",
			"DependsOn": "InternetGatewayAttachment",
			"Properties": {
				"Domain": "vpc"
			},
			"Metadata": {
				"Comment": "Allocates an Elastic IP address for the gateway"
			}
		},
		"FirstNATGateway": {
			"Type": "AWS::EC2::NatGateway",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"FirstNATGatewayEIP",
						"AllocationId"
					]
				},
				"SubnetId": {
					"Ref": "FirstPublicSubnet"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "NAT Gateway associated with the private subnet in the first AZ"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				]
			}
		},
		"SecondNATGateway": {
			"Type": "AWS::EC2::NatGateway",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"SecondNATGatewayEIP",
						"AllocationId"
					]
				},
				"SubnetId": {
					"Ref": "SecondPublicSubnet"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "NAT Gateway associated with the private subnet in the second AZ"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				]
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "Chapter Three Public Route Table"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				]
			}
		},
		"PublicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "InternetGatewayAttachment",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			},
			"Metadata": {
				"Comment": "Routes all traffic through the IGW"
			}
		},
		"FirstPublicSubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"SubnetId": {
					"Ref": "FirstPublicSubnet"
				}
			},
			"Metadata": {
				"Comment": "Associates the first public subnet with the public route table"
			}
		},
		"SecondPublicSubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"SubnetId": {
					"Ref": "SecondPublicSubnet"
				}
			},
			"Metadata": {
				"Comment": "Associates the second public subnet with the public route table"
			}
		},
		"FirstPrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "Chapter Three First Private Route Table"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				]
			}
		},
		"FirstPrivateRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "FirstPrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "FirstNATGateway"
				}
			},
			"Metadata": {
				"Comment": "Routes all traffic through the NAT gateway"
			}
		},
		"FirstPrivateSubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "FirstPrivateRouteTable"
				},
				"SubnetId": {
					"Ref": "FirstPrivateSubnet"
				}
			},
			"Metadata": {
				"Comment": "Associates the private subnet with the private route table"
			}
		},
		"SecondPrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "Chapter Three Second Private Route Table"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				]
			}
		},
		"SecondPrivateRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "SecondPrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "SecondNATGateway"
				}
			},
			"Metadata": {
				"Comment": "Routes all traffic through the NAT gateway"
			}
		},
		"SecondPrivateSubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "SecondPrivateRouteTable"
				},
				"SubnetId": {
					"Ref": "SecondPrivateSubnet"
				}
			},
			"Metadata": {
				"Comment": "Associates the private subnet with the private route table"
			}
		},
		"ELBSecurityGroup":{
			"Type":"AWS::EC2::SecurityGroup",
			"Properties":{
			  "GroupDescription":"ELB Security Group",
			  "VpcId":{
				"Ref":"VPC"
			  },
			  "SecurityGroupIngress":[
				{
				  "IpProtocol":"tcp",
				  "FromPort":80,
				  "ToPort":80,
				  "CidrIp": {
					"Ref": "YourPublicIPAddress"
					}
				}
			  ]
			}
		  },
		"EC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"Tags": [
					{
						"Key": "Name",
						"Value": "WebServerSecurityGroup"
					},
					{
						"Key": "Chapter",
						"Value": "Three"
					}
				],
				"GroupDescription": "Allow http to client host",
				"GroupName": "WebServerSecurityGroup",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress":[
					{
					  "IpProtocol":"tcp",
					  "FromPort":80,
					  "ToPort":80,
					  "SourceSecurityGroupId":{
						"Fn::GetAtt":[
						  "ELBSecurityGroup",
						  "GroupId"
						]
					  }
					}
				  ]
			},
			"Metadata": {
				"Comment": "Allows inbound HTTP traffic from the ELB Security Group"
			}
		},
		"SSMIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "SSMIAMRoleForDjangoWebServerASG",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
                ]
            }
        },
		"SSMIAMInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SSMIAMRole"
                    }
                ]
            }
        },
		"EC2TargetGroup":{
			"Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties":{
			  "HealthCheckIntervalSeconds":30,
			  "HealthCheckProtocol":"HTTP",
			  "HealthCheckTimeoutSeconds":15,
			  "HealthyThresholdCount":5,
			  "Matcher":{
				"HttpCode":"200"
			  },
			  "Name":"EC2TargetGroup",
			  "Port":80,
			  "Protocol":"HTTP",
			  "TargetGroupAttributes":[
				{
				  "Key":"deregistration_delay.timeout_seconds",
				  "Value":"20"
				}
			  ],
			  "UnhealthyThresholdCount":3,
			  "VpcId":{
				"Ref":"VPC"
			  }
			}
		  },
		"DjangoWebAppLoadBalancerListener":{
			"Type":"AWS::ElasticLoadBalancingV2::Listener",
			"Properties":{
			  "DefaultActions":[
				{
				  "Type":"forward",
				  "TargetGroupArn":{
					"Ref":"EC2TargetGroup"
				  }
				}
			  ],
			  "LoadBalancerArn":{
				"Ref":"DjangoWebAppLoadBalancer"
			  },
			  "Port":80,
			  "Protocol":"HTTP"
			}
		  },
		"DjangoWebAppLoadBalancer":{
			"Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties":{
			  "Scheme":"internet-facing",
			  "Subnets":[
				{
					"Ref": "FirstPublicSubnet"
				  },
				  {
					"Ref": "SecondPublicSubnet"
				  }
			  ],
			  "SecurityGroups":[
				{
				  "Fn::GetAtt":[
					"ELBSecurityGroup",
					"GroupId"
				  ]
				}
			  ]
			}
		  },
		"DjangoWebAppLaunchTemplate":{
			"Type":"AWS::EC2::LaunchTemplate",
			"Properties":{
			  "LaunchTemplateName":"DjangoWebAppLaunchTemplate",
			  "LaunchTemplateData":{
				"IamInstanceProfile":{
				"Arn":{"Fn::GetAtt": ["SSMIAMInstanceProfile", "Arn"]}
				},
				"DisableApiTermination":"true",
				"Monitoring": {
					"Enabled": "true"
				},
				"ImageId": {
					"Ref": "LatestAmiId"
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"SecurityGroupIds": [
					{
						"Fn::GetAtt": [
							"EC2SecurityGroup",
							"GroupId"
						]
					}
				],
				"UserData":{
					"Fn::Base64":{
					  "Fn::Join": [
						"", [
						  "#!/bin/bash\n",
						  "cd /tmp\n",
						  "yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n",
						  "systemctl enable amazon-ssm-agent\n",
						  "systemctl start amazon-ssm-agent\n",
						  "METADATATOKEN=$(curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")\n",
						  "EC2PUBLICIPV4=$(curl http://169.254.169.254/latest/meta-data/public-ipv4 -H \"X-aws-ec2-metadata-token: $METADATATOKEN\")\n",
						  "cd /home/ec2-user/inquisitive_bookworm_club/inquisitive_bookworm_club_project\n",
						  "sudo sed -i 's/EC2PUBLICIPV4/'${EC2PUBLICIPV4}'/g' settings.py\n",
						  "sudo systemctl restart gunicorn",
						  "yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n",
						  "systemctl enable amazon-ssm-agent\n",
						  "systemctl start amazon-ssm-agent\n"
						]
					  ]
					}
				  }
			  }
			}
		  },
		  "DjangoWebAppAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchTemplate": {
                    "LaunchTemplateId": { "Ref": "DjangoWebAppLaunchTemplate" },
                    "Version": { "Fn::GetAtt": [ "DjangoWebAppLaunchTemplate", "LatestVersionNumber" ] }
                },
                "MaxSize": "1",
                "MinSize": "1",
				"DefaultInstanceWarmup": 60,				
				"VPCZoneIdentifier": [
					{
					  "Ref": "FirstPublicSubnet"
					},
					{
					  "Ref": "SecondPublicSubnet"
					}
				  ],
				  "MetricsCollection": [
                    {
                        "Granularity": "1Minute",
                        "Metrics": [
                            "GroupMinSize",
                            "GroupMaxSize",
                            "GroupDesiredCapacity",
                            "GroupInServiceInstances",
                            "GroupPendingInstances",
                            "GroupTerminatingInstances",
                            "GroupTotalInstances"
                        ]
                    }
                ],
				"TargetGroupARNs":[
					{
					  "Ref":"EC2TargetGroup"
					}
				  ],
				  "Tags":
						[{
						  "Key": "Name",
						  "Value": "DjangoWebServer",
						  "PropagateAtLaunch": "true"
						}]
            }
        },
		  "ASGScalingPolicyScaleOut":{
			"Type":"AWS::AutoScaling::ScalingPolicy",
			"Properties":{
			  "AutoScalingGroupName":{ "Ref":"DjangoWebAppAutoScalingGroup" },
			  "PolicyType":"TargetTrackingScaling",
			  "TargetTrackingConfiguration":{
				"PredefinedMetricSpecification":{
				  "PredefinedMetricType":"ASGAverageNetworkIn"
				},
				"TargetValue":100,
				"DisableScaleIn": "true"
			  },
			  "Cooldown":"60"
			}
		  }
		},
		"Outputs": {
			"VPC": {
				"Description": "A reference to the created VPC",
				"Value": {
					"Ref": "VPC"
				}
			},
			"FirstPublicSubnet": {
				"Description": "A reference to the public subnet in the 1st Availability Zone",
				"Value": {
					"Ref": "FirstPublicSubnet"
				}
			},
			"SecondPublicSubnet": {
				"Description": "A reference to the public subnet in the 2nd Availability Zone",
				"Value": {
					"Ref": "SecondPublicSubnet"
				}
			},
			"FirstPrivateSubnet": {
				"Description": "A reference to the private subnet in the 1st Availability Zone",
				"Value": {
					"Ref": "FirstPrivateSubnet"
				}
			},
			"SecondPrivateSubnet": {
				"Description": "A reference to the private subnet in the 2nd Availability Zone",
				"Value": {
					"Ref": "SecondPrivateSubnet"
				}
			}
		}
	}
