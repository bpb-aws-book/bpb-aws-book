{
	"Description": "This CloudFormation Template deploys the underlying infrastructure and an auto scaling group with web servers for our Django Web Application",
	"AWSTemplateFormatVersion": "2010-09-09",
	"Parameters": {
		"LatestAmiId": {
			"Description": "The AMI ID with Django Web Application Installed. Its in the format ami-xxxxxxxx",
			"Type": "String",
			"Default": "ami-0f3214ef9fdb0a03e"
		},
		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.small",
			"AllowedValues": [
				"t1.micro",
				"t2.nano",
				"t2.micro",
				"t2.small",
				"t2.medium",
				"t2.large",
				"m1.small",
				"m1.medium",
				"m1.large",
				"m1.xlarge",
				"m2.xlarge",
				"m2.2xlarge",
				"m2.4xlarge",
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge",
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge",
				"m4.10xlarge",
				"c1.medium",
				"c1.xlarge",
				"c3.large",
				"c3.xlarge",
				"c3.2xlarge",
				"c3.4xlarge",
				"c3.8xlarge",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"g2.2xlarge",
				"g2.8xlarge",
				"r3.large",
				"r3.xlarge",
				"r3.2xlarge",
				"r3.4xlarge",
				"r3.8xlarge",
				"i2.xlarge",
				"i2.2xlarge",
				"i2.4xlarge",
				"i2.8xlarge",
				"d2.xlarge",
				"d2.2xlarge",
				"d2.4xlarge",
				"d2.8xlarge",
				"hi1.4xlarge",
				"hs1.8xlarge",
				"cr1.8xlarge",
				"cc2.8xlarge",
				"cg1.4xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"CertificateArn": {
			"Description": "The arn of the self signed certificate",
			"Type": "String",
			"Default": {
			    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:server-certificate/InquisitiveBookwormClubCert"
			}
		}
	},
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Your IP and EC2 Configuration"
					},
					"Parameters": [
						"LatestAmiId",
						"InstanceType"
					]
				}
			],
			"ParameterLabels": {
				"LatestAmiId": {
					"default": "Amazon Linux 2 AMI ID"
				},
				"InstanceType": {
					"default": "Instance Type"
				}
			}
		}
	},
	"Resources": {
		"SSMIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "SSMIAMRoleForDjangoWebServer",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
                ],
				"Policies": [{
					"PolicyName": "AdditionalPermissionsPolicy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [
							{
								"Effect": "Allow",
								"Action": ["secretsmanager:GetResourcePolicy",
											"secretsmanager:GetSecretValue",
											"secretsmanager:DescribeSecret",
											"secretsmanager:ListSecretVersionIds"],
								"Resource": [{"Fn::ImportValue": "BPBBookRDSSecretARN"}]
							},
							{
								"Effect": "Allow",
								"Action": ["secretsmanager:ListSecrets"],
								"Resource": ["*"]
							},
							{
								"Effect": "Allow",
								"Action": [
									"kms:Decrypt"
								],
								"Resource": [{"Fn::ImportValue": "BPBBookKMSKeyARN"}]
							},
							{
								"Effect": "Allow",
								"Action": ["cloudformation:ListExports"],
								"Resource": ["*"]
							}
						]
					}
				}]

            }
        },
		"SSMIAMInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SSMIAMRole"
                    }
                ]
            }
        },
		"EC2TargetGroup":{
			"Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties":{
			  "HealthCheckIntervalSeconds":15,
			  "HealthCheckProtocol":"HTTP",
			  "HealthCheckTimeoutSeconds":10,
			  "HealthyThresholdCount":3,
			  "Matcher":{
				"HttpCode":"200"
			  },
			  "UnhealthyThresholdCount":3,
			  "Name":"EC2TargetGroup",
			  "Port":80,
			  "Protocol":"HTTP",
			  "TargetGroupAttributes":[
				{
				  "Key":"deregistration_delay.timeout_seconds",
				  "Value":"20"
				}
			  ],
			  "VpcId":{
				"Fn::ImportValue": "BPBBookVPCForLearning"
			  }
			}
		  },
		"DjangoWebAppLoadBalancerListener":{
			"Type":"AWS::ElasticLoadBalancingV2::Listener",
			"Properties":{
			  "DefaultActions":[
				{
				  "Type":"forward",
				  "TargetGroupArn":{
					"Ref":"EC2TargetGroup"
				  }
				}
			  ],
			  "LoadBalancerArn":{
				"Ref":"DjangoWebAppLoadBalancer"
			  },
			  "Port":80,
			  "Protocol":"HTTP"
			}
		  },
          "DjangoWebAppLoadBalancerHttpsListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [
					{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "EC2TargetGroup"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "DjangoWebAppLoadBalancer"
				},
				"Port": 443,
				"Protocol": "HTTPS",
				"Certificates": [
					{
						"CertificateArn": {
							"Ref": "CertificateArn"
						}
					}
				],
				"SslPolicy": "ELBSecurityPolicy-2016-08"
			}
		},
		"DjangoWebAppLoadBalancer":{
			"Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties":{
			  "Scheme":"internet-facing",
			  "Name":"DjangoWebAppLoadBalancer",
			  "Subnets":[
				{
					"Fn::ImportValue": "BPBBookVPCFirstPublicSubnet"
				  },
				  {
					"Fn::ImportValue": "BPBBookVPCSecondPublicSubnet"
				  }
			  ],
			  "SecurityGroups":[
				{
					"Fn::ImportValue": "BPBBookELBSecurityGroup"
				}
			  ]
			}
		  },
		"DjangoWebAppLaunchTemplate":{
			"Type":"AWS::EC2::LaunchTemplate",
			"Properties":{
			  "LaunchTemplateName":"DjangoWebAppLaunchTemplate",
			  "LaunchTemplateData":{
				"NetworkInterfaces": [
					{
					  "DeviceIndex": 0,
					  "SubnetId": {
						"Fn::ImportValue": "BPBBookVPCFirstPrivateSubnet"
					},
					"Groups": [
						{
						  "Fn::ImportValue": "BPBBookWebServerSecurityGroup"
						}
					  ]
					}
				  ],
				"IamInstanceProfile":{
				"Arn":{"Fn::GetAtt": ["SSMIAMInstanceProfile", "Arn"]}
				},
				"DisableApiTermination":"true",
				"Monitoring": {
					"Enabled": "true"
				},
				"ImageId": {
					"Ref": "LatestAmiId"
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"UserData":{
					"Fn::Base64":{
					  "Fn::Join": [
						"", [
						  "#!/bin/bash\n",
						  "cd /tmp\n",
						  "yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n",
						  "systemctl enable amazon-ssm-agent\n",
						  "systemctl start amazon-ssm-agent\n",
						  "METADATATOKEN=$(curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")\n",
						  "EC2PRIVATEIPV4=$(curl http://169.254.169.254/latest/meta-data/local-ipv4 -H \"X-aws-ec2-metadata-token: $METADATATOKEN\")\n",
						  "cd /home/ec2-user/inquisitive_bookworm_club/inquisitive_bookworm_club_project\n",
						  "sudo sed -i \"/ALLOWED_HOSTS/c\\ALLOWED_HOSTS = ['EC2PRIVATEIPV4','.elb.amazonaws.com','localhost']\" settings.py\n",
						  "sudo sed -i 's/EC2PRIVATEIPV4/'${EC2PRIVATEIPV4}'/g' settings.py\n",
						  "sudo systemctl restart gunicorn"
						]
					  ]
					}
				  }
			  }
			}
		  },
		  "DjangoWebAppAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchTemplate": {
                    "LaunchTemplateId": { "Ref": "DjangoWebAppLaunchTemplate" },
                    "Version": { "Fn::GetAtt": [ "DjangoWebAppLaunchTemplate", "LatestVersionNumber" ] }
                },
                "MaxSize": "2",
                "MinSize": "1",
				"DefaultInstanceWarmup": 60,				
				"VPCZoneIdentifier": [
					{
					  "Fn::ImportValue": "BPBBookVPCFirstPrivateSubnet"
					},
					{
					  "Fn::ImportValue": "BPBBookVPCSecondPrivateSubnet"
					}
				  ],
				  "MetricsCollection": [
                    {
                        "Granularity": "1Minute",
                        "Metrics": [
                            "GroupMinSize",
                            "GroupMaxSize",
                            "GroupDesiredCapacity",
                            "GroupInServiceInstances",
                            "GroupPendingInstances",
                            "GroupTerminatingInstances",
                            "GroupTotalInstances"
                        ]
                    }
                ],
				"TargetGroupARNs":[
					{
					  "Ref":"EC2TargetGroup"
					}
				  ],
				  "Tags":
						[{
						  "Key": "Name",
						  "Value": "DjangoWebServer",
						  "PropagateAtLaunch": "true"
						}]
            }
        },
		  "ASGScalingPolicyScaleOut":{
			"Type":"AWS::AutoScaling::ScalingPolicy",
			"Properties":{
			  "AutoScalingGroupName":{ "Ref":"DjangoWebAppAutoScalingGroup" },
			  "PolicyType":"TargetTrackingScaling",
			  "TargetTrackingConfiguration":{
				"PredefinedMetricSpecification":{
				  "PredefinedMetricType":"ALBRequestCountPerTarget",
				  "ResourceLabel": {
					"Fn::Join": [
						"/",
						[
							{
								"Fn::GetAtt": [
									"DjangoWebAppLoadBalancer",
									"LoadBalancerFullName"
								]
							},
							{
								"Fn::GetAtt": [
									"EC2TargetGroup",
									"TargetGroupFullName"
								]
							}
						]
					]
				}
				},
				"TargetValue":15,
				"DisableScaleIn": "true"
			  },
			  "Cooldown":"60"
			}
		  }
		},
		"Outputs": {
			"LoadBalancerURL": {
				"Value": {
					"Fn::GetAtt": [
						"DjangoWebAppLoadBalancer",
						"DNSName"
					]
				},
				"Description": "Load Balancer URL"
			}
		}
	}
